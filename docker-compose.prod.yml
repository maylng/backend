version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: maylng-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: maylng
      POSTGRES_USER: maylng
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-maylng_secure_password_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - maylng-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maylng -d maylng"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: maylng-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-maylng_redis_2025}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - maylng-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Database Migration
  migrate:
    image: maylng/backend:secure
    container_name: maylng-migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://maylng:${POSTGRES_PASSWORD:-maylng_secure_password_2025}@postgres:5432/maylng?sslmode=disable
    command: ["migrate"]
    networks:
      - maylng-network
    restart: "no"

  # Main API Server
  api:
    image: maylng/backend:secure
    container_name: maylng-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://maylng:${POSTGRES_PASSWORD:-maylng_secure_password_2025}@postgres:5432/maylng?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-maylng_redis_2025}@redis:6379
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      PORT: 8080
      ENV: production
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    networks:
      - maylng-network
    healthcheck:
      test: ["CMD", "/app/main", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Background Worker
  worker:
    image: maylng/backend:secure
    container_name: maylng-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://maylng:${POSTGRES_PASSWORD:-maylng_secure_password_2025}@postgres:5432/maylng?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-maylng_redis_2025}@redis:6379
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      ENV: production
      LOG_LEVEL: info
    command: ["worker"]
    networks:
      - maylng-network

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: maylng-nginx
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - maylng-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  maylng-network:
    driver: bridge
